requires=
classes=Net=HTTP,HTTPSession,Net=HTTPHeader,Net=HTTPGenericRequest,Net=HTTPRequest,Net=HTTP=Head,Net=HTTP=Get,Net=HTTP=Post,Net=HTTP=Put,Net=HTTP=Copy,Net=HTTP=Delete,Net=HTTP=Lock,Net=HTTP=Mkcol,Net=HTTP=Move,Net=HTTP=Options,Net=HTTP=Propfind,Net=HTTP=Patch,Net=HTTP=Proppatch,Net=HTTP=Trace,Net=HTTP=Unlock,Net=HTTPResponse,Net=HTTPUnknownResponse,Net=HTTPInformation,Net=HTTPSuccess,Net=HTTPRedirection,Net=HTTPClientError,Net=HTTPServerError,Net=HTTPContinue,Net=HTTPSwitchProtocol,Net=HTTPProcessing,Net=HTTPEarlyHints,Net=HTTPOK,Net=HTTPCreated,Net=HTTPAccepted,Net=HTTPNonAuthoritativeInformation,Net=HTTPNoContent,Net=HTTPResetContent,Net=HTTPPartialContent,Net=HTTPMultiStatus,Net=HTTPAlreadyReported,Net=HTTPIMUsed,Net=HTTPMultipleChoices,Net=HTTPMultipleChoice,Net=HTTPMovedPermanently,Net=HTTPFound,Net=HTTPMovedTemporarily,Net=HTTPSeeOther,Net=HTTPNotModified,Net=HTTPUseProxy,Net=HTTPTemporaryRedirect,Net=HTTPPermanentRedirect,Net=HTTPBadRequest,Net=HTTPUnauthorized,Net=HTTPPaymentRequired,Net=HTTPForbidden,Net=HTTPNotFound,Net=HTTPMethodNotAllowed,Net=HTTPNotAcceptable,Net=HTTPProxyAuthenticationRequired,Net=HTTPRequestTimeout,Net=HTTPRequestTimeOut,Net=HTTPConflict,Net=HTTPGone,Net=HTTPLengthRequired,Net=HTTPPreconditionFailed,Net=HTTPPayloadTooLarge,Net=HTTPRequestEntityTooLarge,Net=HTTPURITooLong,Net=HTTPRequestURITooLong,Net=HTTPRequestURITooLarge,Net=HTTPUnsupportedMediaType,Net=HTTPRangeNotSatisfiable,Net=HTTPRequestedRangeNotSatisfiable,Net=HTTPExpectationFailed,Net=HTTPMisdirectedRequest,Net=HTTPUnprocessableEntity,Net=HTTPLocked,Net=HTTPFailedDependency,Net=HTTPUpgradeRequired,Net=HTTPPreconditionRequired,Net=HTTPTooManyRequests,Net=HTTPRequestHeaderFieldsTooLarge,Net=HTTPUnavailableForLegalReasons,Net=HTTPInternalServerError,Net=HTTPNotImplemented,Net=HTTPBadGateway,Net=HTTPServiceUnavailable,Net=HTTPGatewayTimeout,Net=HTTPGatewayTimeOut,Net=HTTPVersionNotSupported,Net=HTTPVariantAlsoNegotiates,Net=HTTPInsufficientStorage,Net=HTTPLoopDetected,Net=HTTPNotExtended,Net=HTTPNetworkAuthenticationRequired,Net=HTTPExceptions,Net=HTTPError,Net=HTTPRetriableError,Net=HTTPServerException,Net=HTTPClientException,Net=HTTPFatalError,Net=HTTPBadResponse,Net=HTTPHeaderSyntaxError
methods=
sublibraries=
is_sublibrary=false
category=Network
source_location=refm/api/src/net/http.rd:1

汎用データ転送プロトコル HTTP を扱うライブラリです。
実装は [[RFC:2616]] に基きます。

=== 使用例

==== ウェブサーバからドキュメントを得る (GET)

//emlist[例1: GET して 表示するだけ][ruby]{
require 'net/http'
print Net::HTTP.get('www.example.com', '/index.html')
//}

//emlist[例2: URI を使う][ruby]{
require 'net/http'
require 'uri'
print Net::HTTP.get(URI.parse('http://www.example.com/index.html'))
//}

//emlist[例3: より汎用的な例][ruby]{
require 'net/http'
require 'uri'

url = URI.parse('http://www.example.com/index.html')
res = Net::HTTP.start(url.host, url.port) {|http|
  http.get('/index.html')
}
puts res.body
//}

//emlist[例4: 上の例よりさらに汎用的な例][ruby]{
require 'net/http'

url = URI.parse('http://www.example.com/index.html')
req = Net::HTTP::Get.new(url.path)
res = Net::HTTP.start(url.host, url.port) {|http|
  http.request(req)
}
puts res.body
//}

==== フォームの情報を送信する (POST)

//emlist[例][ruby]{
require 'net/http'
require 'uri'

#例1: POSTするだけ
res = Net::HTTP.post_form(URI.parse('http://www.example.com/search'),
                          {'q'=>'ruby', 'max'=>'50'})
puts res.body

#例2: 認証付きで POST する
res = Net::HTTP.post_form(URI.parse('http://jack:pass@www.example.com/todo.cgi'),
                          {'from'=>'2005-01-01', 'to'=>'2005-03-31'})
puts res.body

#例3: より細かく制御する
url = URI.parse('http://www.example.com/todo.cgi')
req = Net::HTTP::Post.new(url.path)
req.basic_auth 'jack', 'pass'
req.set_form_data({'from'=>'2005-01-01', 'to'=>'2005-03-31'})
res = Net::HTTP.new(url.host, url.port).start {|http| http.request(req) }
case res
when Net::HTTPSuccess, Net::HTTPRedirection
  # OK
else
  res.value
end
//}

==== プロクシ経由のアクセス

Net::HTTP は http_proxy 環境変数が存在するならば自動的に
その URI を利用してプロクシを利用します。http_proxyを利用したくないならば
[[m:Net::HTTP.new]] や [[m:Net::HTTP.start]] の proxy_addr 引数に
nil を渡してください。

[[m:Net::HTTP.new]] や [[m:Net::HTTP.start]] の proxy_addr や proxy_port
を指定することでプログラムからプロクシを指定することもできます。

//emlist[例][ruby]{
require 'net/http'

proxy_addr = 'your.proxy.host'
proxy_port = 8080

Net::HTTP.new('example.com', nil, proxy_addr, proxy_port).start { |http|
  # always proxy via your.proxy.addr:8080
}
//}

プロクシの認証をユーザ名とパスワードですることもできます。
詳しくは [[m:Net::HTTP.new]] を参照してください。


==== リダイレクトに対応する
以下の例の fetch はリダイレクトに対応しています。
limit 回数以上リダイレクトしたらエラーにします。

//emlist[例][ruby]{
require 'net/http'
require 'uri'

def fetch(uri_str, limit = 10)
  # You should choose better exception. 
  raise ArgumentError, 'HTTP redirect too deep' if limit == 0

  response = Net::HTTP.get_response(URI.parse(uri_str))
  case response
  when Net::HTTPSuccess
    response
  when Net::HTTPRedirection
    fetch(response['location'], limit - 1)
  else
    response.value
  end
end

print fetch('http://www.example.org')
//}

より詳しくは [[c:Net::HTTPResponse]]、 [[c:Net::HTTPSuccess]]、
[[c:Net::HTTPRedirection]] を参照してください。

==== Basic 認証

//emlist[例][ruby]{
require 'net/http'

Net::HTTP.start('www.example.com') {|http|
  req = Net::HTTP::Get.new('/secret-page.html')
  req.basic_auth 'account', 'password'
  response = http.request(req)
  print response.body
}
//}





=== フォームの値の区切り文字について

POSTで application/x-www-form-urlencoded として複数のフォームの値を送る場合、
現在広く行なわれているのは、 name0=value0&name1=value1 のようにアンパサンド
(`&') で区切るやりかたです。
この方法は、[[RFC:1866]] Hypertext Markup Language - 2.0 で初めて公式に登場し、
HTML 4.01 Specification の 17.13.4 Form content types
でもそのように書かれています。

ところが、同じ HTML 4.01 Specification の
B.2.2 Ampersands in URI attribute values では、
この `&' がSGMLの文字実体参照で用いられることが指摘されており、
CGIやサーバの実装者に対し `&' の代わりに
セミコロン `;' をサポートすることを奨めています。

しかし、実際には `;' を解釈しないCGIやサーバもまだまだ見受けられるため
このリファレンスマニュアルでは例として `&' を用いました。

なお Ruby 標準の [[lib:cgi]] ライブラリでは '&' と ';' の両方サポートしていますので、
[[lib:cgi]] ライブラリを使って CGI スクリプトを書く場合はこれらの違いを気にする
必要はありません。
