names=open
visibility=public
kind=defined
source_location=refm/api/src/csv.rd:623

--- open(filename, mode = "rb", options = Hash.new){|csv| ... } -> nil
--- open(filename, mode = "rb", options = Hash.new) -> CSV
--- open(filename, options = Hash.new){|csv| ... } -> nil
--- open(filename, options = Hash.new) -> CSV

このメソッドは [[c:IO]] オブジェクトをオープンして [[c:CSV]] でラップします。
これは CSV ファイルを書くための主要なインターフェイスとして使うことを意図しています。

このメソッドは [[m:IO.open]] と同じように動きます。ブロックが与えられた場合は
ブロックに [[c:CSV]] オブジェクトを渡し、ブロック終了時にそれをクローズします。
ブロックが与えられなかった場合は [[c:CSV]] オブジェクトを返します。

データが [[m:Encoding.default_external]] と異なる場合は、mode にエンコー
ディングを指定する文字列を埋め込まなければなりません。データをどのよう
に解析するか決定するために CSV ライブラリはユーザが mode に指定したエン
コーディングをチェックします。"rb:UTF-32BE:UTF-8" のように mode を指定
すると UTF-32BE のデータを読み込んでUTF-8 に変換してから解析します。

また "rb:BOM|UTF-8" のように mode を指定すると BOM を自動的に取り除きま
す。

CSV オブジェクトは多くのメソッドを [[c:IO]] や [[c:File]] に委譲します。

  * [[m:IO#binmode]]
  * [[m:IO#binmode?]]
  * [[m:IO#close]]
  * [[m:IO#close_read]]
  * [[m:IO#close_write]]
  * [[m:IO#closed?]]
  * [[m:IO#eof]]
  * [[m:IO#eof?]]
  * [[m:IO#external_encoding]]
  * [[m:IO#fcntl]]
  * [[m:IO#fileno]]
  * [[m:File#flock]]
  * [[m:IO#flush]]
  * [[m:IO#fsync]]
  * [[m:IO#internal_encoding]]
  * [[m:IO#ioctl]]
  * [[m:IO#isatty]]
  * [[m:File#path]]
  * [[m:IO#pid]]
  * [[m:IO#pos]]
  * [[m:IO#pos=]]
  * [[m:IO#reopen]]
  * [[m:IO#seek]]
  * [[m:IO#stat]]
  * [[m:StringIO#string]]
  * [[m:IO#sync]]
  * [[m:IO#sync=]]
  * [[m:IO#tell]]
  * [[m:IO#to_i]]
  * [[m:IO#to_io]]
  * [[m:File#truncate]]
  * [[m:IO#tty?]]

@param filename ファイル名を指定します。

@param mode [[m:IO.open]] に指定できるものと同じものを指定できます。

@param options [[m:CSV.new]] のオプションと同じオプションを指定できます。

//emlist[例 読み取り・ブロック指定なし][ruby]{
require "csv"

File.write("test.csv", <<CSV)
id,first name,last name,age
1,taro,tanaka,20
2,jiro,suzuki,18
3,ami,sato,19
4,yumi,adachi,21
CSV
csv = CSV.open("test.csv", headers: true)
csv.class # => CSV
csv.first # => #<CSV::Row "id":"1" "first name":"taro" "last name":"tanaka" "age":"20">
//}

//emlist[例 読み取り・ブロック指定あり][ruby]{
require "csv"

users =<<-EOS
id,first name,last name,age
1,taro,tanaka,20
2,jiro,suzuki,18
3,ami,sato,19
4,yumi,adachi,21
EOS

File.write("test.csv", users)
CSV.open("test.csv", headers: true) do |csv|
  csv.class # => CSV
  csv.first # => #<CSV::Row "id":"1" "first name":"taro" "last name":"tanaka" "age":"20">
end
//}

//emlist[例 書き込み・ブロック指定あり][ruby]{
require "csv"

CSV.open("test.csv", "w") do |csv|
  csv << ["id", "first name", "last name", "age"]
  csv << ["1", "taro", "tanaka", "20"]
  csv << ["2", "jiro", "suzuki", "18"]
  csv << ["3", "ami", "sato", "19"]
  csv << ["4", "yumi", "adachi", "21"]
end
print File.read("test.csv")

# => id,first name,last name,age
#    1,taro,tanaka,20
#    2,jiro,suzuki,18
#    3,ami,sato,19
#    4,yumi,adachi,21
//}

@see [[m:CSV.new]], [[m:IO.open]]

