names=raise
visibility=public
kind=defined
source_location=refm/api/src/_builtin/Fiber:166

--- raise                                            -> object
--- raise(message)                                   -> object
--- raise(exception, message = nil, backtrace = nil) -> object

selfが表すファイバーが最後に [[m:Fiber.yield]] を呼んだ場所で例外を発生させます。

Fiber.yield が呼ばれていないかファイバーがすでに終了している場合、
[[c:FiberError]] が発生します。

引数を渡さない場合、[[c:RuntimeError]] が発生します。
message 引数を渡した場合、message 引数をメッセージとした RuntimeError
が発生します。

その他のケースでは、最初の引数は [[c:Exception]] か Exception
のインスタンスを返す exception メソッドを持ったオブジェクトである
必要があります。
この場合、2つ目の引数に例外のメッセージを渡せます。また3つ目の引数に
例外発生時のスタックトレースを指定できます。

@param message 例外のメッセージとなる文字列です。
@param exception 発生させる例外です。
@param backtrace 例外発生時のスタックトレースです。文字列の配列で指定します。

//emlist[例][ruby]{
f = Fiber.new { Fiber.yield }
f.resume
f.raise "Error!" # => Error! (RuntimeError)
//}

//emlist[ファイバー内のイテレーションを終了させる例][ruby]{
f = Fiber.new do
  loop do
    Fiber.yield(:loop)
  end
  :exit
end

p f.resume              # => :loop
p f.raise StopIteration # => :exit
//}

