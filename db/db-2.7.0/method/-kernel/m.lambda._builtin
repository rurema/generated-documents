names=lambda,proc
visibility=public
kind=defined
source_location=refm/api/src/_builtin/functions:2566

--- proc { ... } -> Proc
--- lambda { ... } -> Proc
--- proc -> Proc

与えられたブロックから手続きオブジェクト ([[c:Proc]] のインスタンス)
を生成して返します。[[m:Proc.new]] に近い働きをします。

ブロックが指定されなければ、呼び出し元のメソッドで指定されたブロック
を手続きオブジェクトとして返します。呼び出し元のメソッドがブロックなし
で呼ばれると [[c:ArgumentError]] 例外が発生します。

ただし、ブロックを指定しない呼び出しは推奨されていません。呼び出し元のメソッドで指定されたブロック
を得たい場合は明示的に & 引数でうけるべきです。

ブロックを指定しない lambda は Ruby 2.6 までは警告メッセージ
「warning: tried to create Proc object without a block」
が出力され、Ruby 2.7 では
[[c:ArgumentError]] (tried to create Proc object without a block)
が発生します。

ブロックを指定しない proc は、Ruby 2.7 では
[[m:$VERBOSE]] = true のときには警告メッセージ
「warning: Capturing the given block using Proc.new is deprecated; use `&block` instead」
が出力され、Ruby 3.0 では
[[c:ArgumentError]] (tried to create Proc object without a block)
が発生します。

@raise ArgumentError スタック上にブロックがないのにブロックを省略した呼び出しを行ったときに発生します。

//emlist[例][ruby]{
def foo &block
  lambda(&block)
end

it = foo{p 12}
it.call #=> 12
//}

@see [[c:Proc]],[[m:Proc.new]]

===[a:should_use_next] 手続きを中断して値を返す

手続きオブジェクトを中断して、呼出し元(呼び出しブロックでは yield、それ以外では [[m:Proc#call]])
へジャンプし値を返すには next を使います。break や return ではありません。


//emlist[例][ruby]{
def foo
  f = Proc.new{
    next 1
    2              # この行に到達することはない
  }
end

p foo().call       #=> 1
//}

===[a:block] Proc オブジェクトをブロック付きメソッド呼び出しに使う

ブロック付きメソッドに対して Proc オブジェクトを `&' を指定して渡すと
呼び出しブロックのように動作します。
しかし、厳密には以下の違いがあります。
これらは、Proc オブジェクトが呼び出しブロックとして振舞う際の制限です。

//emlist[問題なし][ruby]{
(1..5).each { break }
//}

//emlist[LocalJumpError が発生します。][ruby]{
pr = Proc.new { break }
(1..5).each(&pr)
//}

===[a:lambda_proc] lambda と proc と Proc.new とイテレータの違い

[[m:Kernel.#lambda]] と [[m:Proc.new]] はどちらも [[c:Proc]] クラスのインスタンス(手続きオブジェクト)を生成しますが、
生成された手続きオブジェクトはいくつかの場面で挙動が異なります。 lambda の生成する手続きオブジェクトのほうが
よりメソッドに近い働きをするように設計されています。

[[m:Kernel.#proc]] は Proc.new と同じになります。
引数に & を付けることで手続きオブジェクト化したブロックは、Proc.new で生成されたそれと
同じように振る舞います。

==== 引数の扱い

lambda のほうがより厳密です。引数の数が違っていると（メソッドのように）エラーになります。
Proc.new は引数を多重代入に近い扱い方をします。

//emlist[Proc.new は引数の数が違っていてもエラーにならない][ruby]{
b = Proc.new{|a,b,c|
  p a,b,c
}
b.call(2, 4)
#=> 2
    4
    nil
//}

//emlist[lambda は引数の数が違うとエラーになる][ruby]{
b = lambda{|a,b,c|
  p a,b,c
}
b.call(2, 4)
# => wrong number of arguments (given 2, expected 3)
//}

[[ref:d:spec/call#block_arg]] も参照してください。

==== ジャンプ構文の挙動の違い

return と break は、lambda と Proc.new では挙動が異なります。
例えば return を行った場合、lambda では手続きオブジェクト自身を抜けますが、
Proc.new では手続きオブジェクトを囲むメソッドを抜けます。

//emlist[例][ruby]{
def test_proc
  f = Proc.new { return :from_proc }
  f.call
  return :from_method
end

def test_lambda
  f = lambda { return :from_lambda }
  f.call
  return :from_method
end

def test_block
  tap { return :from_block }
  return :from_method
end

p test_proc()   #=> :from_proc
p test_lambda() #=> :from_method
p test_block()  #=> :from_block
//}

以下の表は、手続きオブジェクトの実行を上の例と同じように、手続きオブジェクトが定義されたのと
同じメソッド内で行った場合の結果です。

                 return                          next                        break
  Proc.new   メソッドを抜ける            手続きオブジェクトを抜ける   例外が発生する
  proc       メソッドを抜ける            手続きオブジェクトを抜ける   例外が発生する
  lambda     手続きオブジェクトを抜ける  手続きオブジェクトを抜ける   手続きオブジェクトを抜ける
  イテレータ メソッドを抜ける            手続きオブジェクトを抜ける   手続きオブジェクトを抜ける



===[a:orphan] orphan な手続きオブジェクトの挙動

Proc を生成したメソッドから脱出した後、手続きオブジェクトからの
return, break は例外 [[c:LocalJumpError]] を発生させます。
ただし、上でも説明した通り lambda で生成した手続きオブジェクトはメソッドと同じように振る舞う
ことを意図されているため、例外 [[c:LocalJumpError]] は発生しません。

//emlist[例][ruby]{
def foo
  Proc.new { return }
end

foo.call
# => in `call': return from proc-closure (LocalJumpError)
//}

以下の表は、手続きオブジェクトの実行を上の例と同じように、手続きオブジェクトが定義されたメソッドを
脱出してから行った場合の結果です。

                 return                          next                        break
  Proc.new   例外が発生する              手続きオブジェクトを抜ける   例外が発生する
  proc       例外が発生する              手続きオブジェクトを抜ける   例外が発生する
  lambda     手続きオブジェクトを抜ける  手続きオブジェクトを抜ける   手続きオブジェクトを抜ける

