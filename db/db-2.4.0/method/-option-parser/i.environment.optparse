names=environment
visibility=public
kind=defined

--- environment(env)    -> [String]

環境変数 env に対して
[[m:Shellwords.#shellwords]] を呼
んで配列にしてから parse を行ないます。

@param env 環境変数名を文字列で与えます。

@raise OptionParser::ParseError パースに失敗した場合、発生します。
                                実際は OptionParser::ParseError のサブク
                                ラスになります。

//emlist[例][ruby]{
require "optparse"

config = {}
opts = OptionParser.new
opts.on("-r", "--require LIBRARY"){|lib| config[:lib] = lib }

# HOGE_OPT は hoge というプログラム名に対応した名前です
ENV['HOGE_OPT'] = %q{--require lib1 'remain data'}
p opts.environment('HOGE_OPT') # => ["remain data"]
p config                           # => {:lib=>"lib1"}
//}
