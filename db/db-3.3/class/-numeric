type=class
superclass=Object
included=Comparable
extended=
dynamically_included=
dynamically_extended=
library=_builtin
aliases=
aliasof=
source_location=refm/api/src/_builtin/Numeric:1

数値を表す抽象クラスです。[[c:Integer]] や [[c:Float]] などの数値クラス
は Numeric のサブクラスとして実装されています。

演算や比較を行うメソッド(+, -, *, /, <=>)は Numeric のサブクラスで定義されま
す。Numeric で定義されているメソッドは、サブクラスで提供されているメソッド
(+, -, *, /, %) を利用して定義されるものがほとんどです。
つまり Numeric で定義されているメソッドは、Numeric のサブクラスとして新たに数値クラスを定義した時に、
演算メソッド(+, -, *, /, %, <=>, coerce)だけを定義すれば、数値クラスのそのほかのメソッドが
適切に定義されることを意図して提供されています。

+@, -@ は単項演算子 +, - を表しメソッド定義などではこの記法を利用します。

効率のため Numeric のメソッドと同じメソッドがサブクラスで再定義されている場合があります。

[[m:Numeric#coerce]] メソッドを使うことによって異なる数値クラス間で演算を行うこともできます。

=== 数値関連のメソッドを実際に定義しているクラス一覧

ほとんどの数値関連のメソッドはサブクラスで再定義されています。これは、
効率のためであったり上位抽象クラスで実装を定義することができなかったり
するためです。以下の表は
2.4.2
での一覧です。実際にどのメソッドがどのクラスに定義されているかはそれぞ
れのクラスを参照してください。


 => ruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-darwin15]
                             Numeric    Integer     Float     Rational   Complex
  --------------------------------------------------------------------------------
                        % |     o          o          o          -          -
                        & |     -          o          -          -          -
                        * |     -          o          o          o          o
                       ** |     -          o          o          o          o
                        + |     -          o          o          o          o
                       +@ |     o          -          -          -          -
                        - |     -          o          o          o          o
                       -@ |     o          o          o          o          o
                        / |     -          o          o          o          o
                        < |     -          o          o          -          -
                             Numeric    Integer     Float     Rational   Complex
  --------------------------------------------------------------------------------
                       << |     -          o          -          -          -
                       <= |     -          o          o          -          -
                      <=> |     o          o          o          o          -
                       == |     -          o          o          o          o
                      === |     -          o          o          -          -
                        > |     -          o          o          -          -
                       >= |     -          o          o          -          -
                       >> |     -          o          -          -          -
                       [] |     -          o          -          -          -
                        ^ |     -          o          -          -          -
                             Numeric    Integer     Float     Rational   Complex
  --------------------------------------------------------------------------------
                      abs |     o          o          o          o          o
                     abs2 |     o          -          -          -          o
                    angle |     o          -          o          -          o
                      arg |     o          -          o          -          o
               bit_length |     -          o          -          -          -
                     ceil |     o          o          o          o          -
                      chr |     -          o          -          -          -
                   coerce |     o          o          o          o          o
                     conj |     o          -          -          -          o
                conjugate |     o          -          -          -          o
                             Numeric    Integer     Float     Rational   Complex
  --------------------------------------------------------------------------------
              denominator |     o          o          o          o          o
                   digits |     -          o          -          -          -
                      div |     o          o          -          -          -
                   divmod |     o          o          o          -          -
                   downto |     -          o          -          -          -
                     eql? |     o          -          o          -          o
                    even? |     -          o          -          -          -
                     fdiv |     o          o          o          o          o
                  finite? |     o          -          o          -          o
                    floor |     o          o          o          o          -
                             Numeric    Integer     Float     Rational   Complex
  --------------------------------------------------------------------------------
                      gcd |     -          o          -          -          -
                   gcdlcm |     -          o          -          -          -
                     hash |     -          -          o          o          o
                        i |     o          -          -          -          -
                     imag |     o          -          -          -          o
                imaginary |     o          -          -          -          o
                infinite? |     o          -          o          -          o
                  inspect |     -          o          o          o          o
                 integer? |     o          o          -          -          -
                      lcm |     -          o          -          -          -
                             Numeric    Integer     Float     Rational   Complex
  --------------------------------------------------------------------------------
                magnitude |     o          o          o          o          o
                   modulo |     o          o          o          -          -
                     nan? |     -          -          o          -          -
                negative? |     o          -          o          o          -
                     next |     -          o          -          -          -
               next_float |     -          -          o          -          -
                 nonzero? |     o          -          -          -          -
                numerator |     o          o          o          o          o
                     odd? |     -          o          -          -          -
                      ord |     -          o          -          -          -
                             Numeric    Integer     Float     Rational   Complex
  --------------------------------------------------------------------------------
                    phase |     o          -          o          -          o
                    polar |     o          -          -          -          o
                positive? |     o          -          o          o          -
                     pred |     -          o          -          -          -
               prev_float |     -          -          o          -          -
                      quo |     o          -          o          o          o
              rationalize |     -          o          o          o          o
                     real |     o          -          -          -          o
                    real? |     o          -          -          -          o
                     rect |     o          -          -          -          o
                             Numeric    Integer     Float     Rational   Complex
  --------------------------------------------------------------------------------
              rectangular |     o          -          -          -          o
                remainder |     o          o          -          -          -
                    round |     o          o          o          o          -
   singleton_method_added |     o          -          -          -          -
                     size |     -          o          -          -          -
                     step |     o          -          -          -          -
                     succ |     -          o          -          -          -
                    times |     -          o          -          -          -
                     to_c |     o          -          -          -          o
                     to_f |     -          o          o          o          o
                             Numeric    Integer     Float     Rational   Complex
  --------------------------------------------------------------------------------
                     to_i |     -          o          o          o          o
                   to_int |     o          o          o          -          -
                     to_r |     -          o          o          o          o
                     to_s |     -          o          o          o          o
                 truncate |     o          o          o          o          -
                     upto |     -          o          -          -          -
                    zero? |     o          -          o          -          -
                        | |     -          o          -          -          -
                        ~ |     -          o          -          -          -

=== 丸めメソッドの動作一覧


[[m:Numeric#ceil]], [[m:Numeric#floor]], [[m:Numeric#round]], [[m:Numeric#truncate]]
のふるまいの違いの表です。左の実数に対して各メソッドを呼ぶと表のような数を
返します。

              |       ceil      floor      round   truncate
        ----------------------------------------------------
          1.9 |          2          1          2          1
          1.1 |          2          1          1          1
         -1.1 |         -1         -2         -1         -1
         -1.9 |         -1         -2         -2         -1

=== 丸めメソッドの拡張例

切上げはceil, floor を使用して以下のように定義できます。

//emlist[例][ruby]{
if n > 0 then
  n.ceil
else
  n.floor
end
//}

また、任意桁の切上げ、切捨て、四捨五入を行うメソッドは以下のように
定義できます。

//emlist[][ruby]{
class Numeric
  def roundup(d=0)
    x = 10**d
    if self > 0
      self.quo(x).ceil * x
    else
      self.quo(x).floor * x
    end
  end

  def rounddown(d=0)
    x = 10**d
    if self < 0
      self.quo(x).ceil * x
    else
      self.quo(x).floor * x
    end
  end

  def roundoff(d=0)
    x = 10**d
    if self < 0
      (self.quo(x) - 0.5).ceil * x
    else
      (self.quo(x) + 0.5).floor * x
    end
  end
end
//}


===[a:division] 除法と商・剰余

Numeric には除法（除算；割り算；division）に関わるメソッドがいくつもありますが、
除法にはいくつか種類があるため、全貌が把握しづらくなっています。

この節では除法の種類を説明し、各メソッドがどの除法に基づいているのかが分かるようにします。

まず用語ですが、割られる数を被除数（dividend）、割る数を除数（divisor）、
割った結果を商（quotient）と言います。

除法は大きく分けて二つあります。

そのうちの一つを、ここでは「普通の除法」と呼ぶことにします。

普通の除法は、被除数を x、除数を y、商を q としたとき、x == q×y となるよう定義された除法です。
7 割る 2 を 3.5 とする除法は普通の除法です。

普通の除法における商をここでは「普通の商」と呼ぶことにしましょう。

もう一つの除法は、商が必ず整数になるよう定義されるもので、これを「整除法」と言います。
7 割る 2 を 3 余り 1 とする除法は整除法です。

整除法における商をとくに「整商」と言います。

整除法では、被除数を x、除数を y、商を q としたとき、x と q×y が一致する（つまり割り切れる）とは限りません。

その差 x − q×y を剰余（余り；remainder）と言います。
整除法は商と剰余がセットで決まる除法なので「剰余付き除法」とも呼ばれます。

しばしば「整除法は整数の世界でしか成り立たない」と誤解されていますが、
2.5 m の紐から 0.75 m の紐が何本取れて何 m の半端が出るか、という問題を
考えれば、被除数・除数が整数でなくてもよいことが分かります。

//emlist[例: Float の世界の整商と剰余][ruby]{
p 2.5.divmod(0.75) # => [3, 0.25]
# 2.5 m の紐から 0.75 m の紐が 3 本取れて 0.25 m 余る
//}

ただし、複素数の世界では整商・剰余は考えないので、Complex に divmod など
のメソッドは定義されていません。

以下では、まず普通の除法に基づくメソッドについて述べます。

普通の商を得るメソッドは [[m:Numeric#quo]] です。
quo の返り値のクラスは、被除数・除数のクラスによって異なります。
例えば、被除数・除数の一方が Integer、他方が Float なら返り値は Float です。

普通の商を得るメソッドには、[[m:Numeric#fdiv]] もあります。
これは商を Float で返します（被除数・除数の一方が Complex のときは
Complex を返します）。

整数同士の除法の場合、quo は厳密値を Rational で返しますが、
fdiv では丸め誤差が生じうることに注意してください。

次に整除法に基づくメソッドについて述べます。

重要なことは、整除法の定義（言い換えれば整商・剰余の定義）がいくつもある、ということです。

しかし、どの定義にも共通していることが二つあります。

それは、被除数を x、除数を y としたときの整商を q、剰余を r とすると、第一に

x == y * q + r （ただし q は整数）

が成り立つということです。
第二に、剰余 r は「半端」ですから、r の絶対値は y の絶対値より小さくなくては
ならないということです。

この二つを満たす整商・剰余の定義は何通りもありますが、
Ruby では、剰余に関して二通りの定義を採用し、
[[m:Numeric#modulo]] メソッドと [[m:Numeric#remainder]] メソッドとして
実装されています。

modulo は、

  * y > 0 のとき 0 <= r <  y
  * y < 0 のとき y <  r <= 0

となるように定められた剰余です。
定義からすぐ分かるとおり、剰余 r の符号は除数 y の符号と一致します。

modulo の別名は % で、普通はメソッド呼び出しの形ではなく二項演算子の
形で用います。

modulo に対応する整商は [[m:Numeric#div]] です。
これは、普通の商を [[m:Numeric#floor]] で整数化したものと
一致します。

さきほどの例で出てきた [[m:Numeric#divmod]] は、
div と modulo の値を一度に配列で返すメソッドです。

一方、remainder は

  * x > 0 のとき  0   <= r <  |y|
  * x < 0 のとき -|y| <  r <= 0

となるように定められた剰余です。
定義からすぐ分かるとおり、剰余 r の符号は被除数 x の符号と一致します。

これに対応する整商を得るメソッドはありませんが、
x.quo(y).truncate で得ることができます。

x と y がともに正のときと、ともに負のとき、modulo と remainder は
一致します。

商を得るメソッドには [[m:Numeric#/]] もあります。
普通はメソッド呼び出しの形ではなく、二項演算子として用います。

これは被除数・除数のクラスによって挙動が異なります。例えば Integer 同士なら div と同じ、Integer や Rational と Float なら quo と同じ、といった具合です。

被除数のクラスの / メソッドの説明をご覧ください。

Ruby 3.2 では整商を得るメソッドとして [[m:Integer#ceildiv]] が導入されました。

ceildiv は普通の商を正の無限大に向かって丸めた整商を返します。

n 個の物を m 個ずつまとめたとき，（半端をまとめたものも含めて）いくつのグループが
できるかは以下のようにして得られます。

//emlist[例: n 個を m 個ずつまとめて出来るグループの数][ruby]{
p n.ceildiv(m)
//}

ceildiv に対応した剰余を返すメソッドはありません。
